import { v } from "convex/values";
import { mutation } from "./_generated/server";
import { fileFields } from "./Schema";

/* 
    **Uploading files via upload URLs**

    Arbitrarily large files can be uploaded directly to your backend using a generated upload URL. This requires the client to make 3 requests:

    1. Generate an upload URL using a mutation that calls storage.generateUploadUrl().
    2. Send a POST request with the file contents to the upload URL and receive a storage ID.
    3. Save the storage ID into your data model via another mutation.
    
    In the first mutation that generates the upload URL you can control who can upload files to your Convex storage. 
*/



// 1. Generating an upload URL
export const generateUploadUrl = mutation(async (ctx) => {
    // An upload URL can be generated by the storage.generateUploadUrl function of the MutationCtx object:
    return await ctx.storage.generateUploadUrl();
    // This mutation can control who is allowed to upload files.
    // The upload URL expires in 1 hour and so should be fetched shortly before the upload is made.
  });

// 3. Writing the new storage ID to the database  
export const createFileLink = mutation({
    args: fileFields,
    handler: async (ctx, args) => {
        // The file size is not limited, but upload POST request has a 2 minute timeout.
        await ctx.db.insert("File", {
            name: args.name,
            category: args.category,
            tokenIdentifier: args.tokenIdentifier,
            storageId: args.storageId
        });
    },
});